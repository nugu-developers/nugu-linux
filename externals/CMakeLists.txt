include(ExternalProject)

# njson
FILE(GLOB_RECURSE njson_files njson/src/*.cpp)
ADD_LIBRARY(njson STATIC ${njson_files})
TARGET_INCLUDE_DIRECTORIES(njson PRIVATE njson/include)
IF(CMAKE_SYSTEM_NAME MATCHES "MINGW")
	TARGET_COMPILE_OPTIONS(njson PRIVATE -Wno-class-memaccess)
ENDIF()
INSTALL(DIRECTORY njson/include/njson
		DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/nugu/)

# In Bionic(18.04), the PKG_CONFIG_EXECUTABLE value with an absolute path is
# passed from the debian package build script.
IF (EXISTS ${PKG_CONFIG_EXECUTABLE})
	SET(OPT_PKGCONFIG "-DPKG_CONFIG_EXECUTABLE=${PKG_CONFIG_EXECUTABLE}")
ENDIF()

SET(CUSTOM_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -g")

IF(ENABLE_BUILTIN_CURL)
	# nghttp2
	ExternalProject_Add(NGHTTP2
		SOURCE_DIR ${PROJECT_SOURCE_DIR}/externals/nghttp2
		DOWNLOAD_COMMAND ""
		BUILD_ALWAYS 1
		BUILD_BYPRODUCTS ${PROJECT_BINARY_DIR}/nghttp2/lib/libnghttp2.a
		CMAKE_ARGS
			-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
			-DCMAKE_VERBOSE_MAKEFILE=ON
			-DCMAKE_C_FLAGS=${CUSTOM_C_FLAGS}
			-DCMAKE_LIBRARY_ARCHITECTURE=${CMAKE_LIBRARY_ARCHITECTURE}
			-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
			-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
			-DPKG_CONFIG_EXECUTABLE=${PKG_CONFIG_EXECUTABLE}
			-DCMAKE_SYSTEM_PROCESSOR=${CMAKE_SYSTEM_PROCESSOR}
			-DENABLE_LIB_ONLY=1
			-DENABLE_SHARED_LIB=0
			-DENABLE_STATIC_LIB=1
			-DCMAKE_INSTALL_PREFIX=${PROJECT_BINARY_DIR}/nghttp2
			# Set the 'LIBDIR' value to not use the multiarch path in the library installation path.
			-DCMAKE_INSTALL_LIBDIR=${PROJECT_BINARY_DIR}/nghttp2/lib
	)

	# curl
	ExternalProject_Add(CURL
		SOURCE_DIR ${PROJECT_SOURCE_DIR}/externals/curl
		DOWNLOAD_COMMAND ""
		DEPENDS NGHTTP2
		BUILD_ALWAYS 1
		BUILD_BYPRODUCTS ${PROJECT_BINARY_DIR}/curl/lib/libcurl.a
		CMAKE_ARGS
			-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
			-DCMAKE_VERBOSE_MAKEFILE=ON
			-DCMAKE_C_FLAGS=${CUSTOM_C_FLAGS}
			-DCMAKE_LIBRARY_ARCHITECTURE=${CMAKE_LIBRARY_ARCHITECTURE}
			-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
			-DPKG_CONFIG_EXECUTABLE=${PKG_CONFIG_EXECUTABLE}
			-DCMAKE_SYSTEM_PROCESSOR=${CMAKE_SYSTEM_PROCESSOR}
			-DBUILD_SHARED_LIBS=OFF
			-DHTTP_ONLY=ON
			-DUSE_NGHTTP2=ON
			-DCURL_ZLIB=ON
			-DUSE_OPENSSL=ON
			-DBUILD_TESTING=OFF
			-DBUILD_CURL_EXE=OFF
			-DCURL_STATICLIB=1
			-DCURL_CA_BUNDLE:STRING=auto
			-DCURL_CA_PATH:STRING=none
			-DNGHTTP2_INCLUDE_DIR=${PROJECT_BINARY_DIR}/nghttp2/include
			-DNGHTTP2_LIBRARY=${PROJECT_BINARY_DIR}/nghttp2/lib
			-DCMAKE_INSTALL_PREFIX=${PROJECT_BINARY_DIR}/curl
			-DCMAKE_INSTALL_LIBDIR=${PROJECT_BINARY_DIR}/curl/lib
		PATCH_COMMAND ${CMAKE_CURRENT_SOURCE_DIR}/patch_curl.sh
	)
ENDIF()

# opus
IF(ENABLE_OPUS_PLUGIN)
	IF(ENABLE_BUILTIN_OPUS)
		IF(ENABLE_BUILTIN_OPUS_FLOAT_API)
			SET(OPUS_FIXED_POINT OFF)
			SET(OPUS_ENABLE_FLOAT_API ON)
		ELSE()
			SET(OPUS_FIXED_POINT ON)
			SET(OPUS_ENABLE_FLOAT_API OFF)
		ENDIF()

		ExternalProject_Add(OPUSLIB
			SOURCE_DIR ${PROJECT_SOURCE_DIR}/externals/opus
			DOWNLOAD_COMMAND ""
			BUILD_BYPRODUCTS ${PROJECT_BINARY_DIR}/opus/lib/libopus.a
			CMAKE_ARGS
				-DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
				-DCMAKE_VERBOSE_MAKEFILE=ON
				-DCMAKE_C_FLAGS=${CUSTOM_C_FLAGS}
				-DCMAKE_LIBRARY_ARCHITECTURE=${CMAKE_LIBRARY_ARCHITECTURE}
				-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
				-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
				-DPKG_CONFIG_EXECUTABLE=${PKG_CONFIG_EXECUTABLE}
				-DCMAKE_SYSTEM_PROCESSOR=${CMAKE_SYSTEM_PROCESSOR}
				-DENABLE_LIB_ONLY=1
				-DENABLE_SHARED_LIB=0
				-DENABLE_STATIC_LIB=1
				-DOPUS_FIXED_POINT=${OPUS_FIXED_POINT}
				-DOPUS_ENABLE_FLOAT_API=${OPUS_ENABLE_FLOAT_API}
				-DCMAKE_INSTALL_PREFIX=${PROJECT_BINARY_DIR}/opus
				# Set the 'LIBDIR' value to not use the multiarch path in the library installation path.
				-DCMAKE_INSTALL_LIBDIR=${PROJECT_BINARY_DIR}/opus/lib
		)
	ENDIF()
ENDIF()
