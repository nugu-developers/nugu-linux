name: Pull Request
on: pull_request

jobs:
  checkpatch_review:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v1
      - name: Run checkpatch review
        uses: webispy/checkpatch-action@master

  clang_tidy_review:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Run clang-tidy review
        run: |
          docker run -t --rm -v $PWD:$PWD -w $PWD nugulinux/devenv:bionic /bin/bash -c "run_codereview.sh nugu-linux externals"
          if [ ! -f "report.json" ]; then
              echo "code checker error"
              exit 1
          fi
          count=$(cat report.json | jq '.count')
          if [ "$count" -gt "0" ]; then
              for ((i=0; i<$count; i++))
              do
                  file=$(cat report.json | jq -r '.issues['$i'].file')
                  line=$(cat report.json | jq -r '.issues['$i'].line')
                  message=$(cat report.json | jq -r '.issues['$i'].message')

                  echo "::warning file=$file,line=$line::$message"
              done
              rm report.json
              exit 1
          fi

  build:
    runs-on: ubuntu-latest
    needs: [checkpatch_review, clang_tidy_review]
    strategy:
      fail-fast: true
      matrix:
        target:
          [
            xenial_x64,
            xenial_arm64,
            xenial_armhf,
            bionic_x64,
            bionic_arm64,
            bionic_armhf,
          ]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0

      - name: Build
        run: |
          whoami
          pwd
          ls -la
          cd ..
          pwd
          ls -la
          chmod 777 $PWD
          chmod 777 $PWD/nugu-linux
          ls -la
          ls -la $PWD/nugu-linux
          docker run -t --rm --privileged \
              -v $PWD:$PWD \
              -v /var/lib/schroot/chroots \
              -w $PWD/nugu-linux \
              nugulinux/buildenv:${{ matrix.target }} \
              sdkbuild.sh
          ls -la
          mkdir /tmp/result
          cp *.deb /tmp/result/

      - name: Build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: DEB packages
          path: /tmp/result/
