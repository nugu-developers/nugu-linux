name: Push
on:
  push:
    branches:
      - master
    tags:
      - 'v*'

jobs:
  build_linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        target:
          [
            bionic_x64,
            bionic_arm64,
            bionic_armhf,
            focal_x64,
            focal_arm64,
            focal_armhf,
            jammy_x64,
            jammy_arm64,
            jammy_armhf,
          ]
    steps:
      - name: Info
        env:
          GITHUB_EVENT: ${{ toJson(github.event) }}
        run: |
          TZ=UTC date
          TZ=Asia/Seoul date
          echo "event_name = ${{ github.event_name }}"
          echo "ref = ${{ github.ref }}"

      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Build
        run: |
          whoami
          pwd
          ls -la
          cd ..
          pwd
          ls -la
          chmod 777 $PWD
          chmod 777 $PWD/nugu-linux
          ls -la
          ls -la $PWD/nugu-linux
          docker run -t --rm --privileged \
              -v $PWD:$PWD \
              -v /var/lib/schroot/chroots \
              -w $PWD/nugu-linux \
              nugulinux/buildenv:${{ matrix.target }} \
              sdkbuild.sh
          ls -la
          mkdir /tmp/result
          cp *.deb /tmp/result/

      - name: Build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: DEB packages
          path: /tmp/result/

      - name: Upload artifact to release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: svenstaro/upload-release-action@v2
        with:
          file: /tmp/result/*
          file_glob: true
          repo_token: ${{ github.token }}
          overwrite: true
          tag: ${{ github.ref }}

  blackduck:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Prepare
        run: |
          # Use only njson submodule
          git submodule update --init externals/njson

          # generate.sh script
          cat <<EOF > generate.sh
          #!/bin/sh

          mkdir build && cd build
          cmake .. -DENABLE_BUILTIN_CURL=OFF -DCMAKE_INSTALL_PREFIX=/usr
          cd ..

          cp build/compile_commands.json .
          cp build/nugu.pc .
          rm -rf build
          EOF

          # Run cmake in docker container
          chmod +x generate.sh
          docker run -t --rm -v $PWD:$PWD -w $PWD \
            nugulinux/devenv:jammy ./generate.sh

          # Get version from pc file
          VERSION=`pkg-config --modversion ./nugu.pc`
          echo "version=${VERSION}" >> $GITHUB_ENV

      - name : Black Duck Synopsys Detect
        run: |
          bash <(curl -s -L https://detect.synopsys.com/detect8.sh) \
          --blackduck.url="${{ secrets.BLACKDUCK_URL }}" \
          --blackduck.api.token="${{ secrets.BLACKDUCK_API_TOKEN }}" \
          --blackduck.trust.cert=true \
          --detect.project.name="${{ secrets.BLACKDUCK_PROJECT_NAME }}" \
          --detect.project.version.name="${{ env.version }}" \
          --detect.source.path="./" \
          --detect.blackduck.signature.scanner.snippet.matching=SNIPPET_MATCHING \
          --detect.blackduck.signature.scanner.upload.source.mode=true \
          --detect.clone.project.version.latest=true \
          --detect.project.tags=TYPE_sdk
